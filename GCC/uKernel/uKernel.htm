<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\hlias\Desktop\projects\workspace\uKernel\uKernel.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\hlias\Desktop\projects\workspace\uKernel\uKernel.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Sat Nov 23 14:39:36 2013
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task3 &rArr; sem_release &rArr; removeHeadFromWaitQueue &rArr; exitCritical
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DebugMon_Handler</a><BR>
 <LI><a href="#[1b]">AACI_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">AACI_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">AACI_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[22]">CAN_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[20]">CHLCD_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1c]">CLCD_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[25]">CPU_CLCD_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1d]">ENET_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[21]">FLEXRAY_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[24]">I2C_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[60]">IdleTask</a> from kernel.o(.text) referenced from kernel.o(.text)
 <LI><a href="#[23]">LIN_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[15]">MCIA_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[16]">MCIB_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[12]">RTC_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[29]">Reset_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[27]">SPI_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[13]">TIM0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[4d]">Task1</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4c]">Task2</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[49]">Task3</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[47]">Task4</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[46]">Task5</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[42]">Task6</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[17]">UART0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[19]">UART2_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[26]">UART3_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1a]">UART4_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1e]">USBDC_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1f]">USBHC_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[11]">WDT_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[2a]">__main</a> from __main.o(!!!main) referenced from startup_mps_cm3.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[94]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[95]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[30]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[32]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[97]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[98]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[99]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[3b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[34]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[36]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[37]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; uKern_Init &rArr; idleTaskInit &rArr; task_create &rArr; TCBAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5f]"></a>__asm___6_task_c_37835c6e__cpsie</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
</UL>

<P><STRONG><a name="[5e]"></a>__asm___6_task_c_37835c6e__cpsid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>

<P><STRONG><a name="[6a]"></a>__asm___8_kernel_c_85227911__cpsie</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kernel.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
</UL>

<P><STRONG><a name="[69]"></a>__asm___8_kernel_c_85227911__cpsid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kernel.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>

<P><STRONG><a name="[6e]"></a>__asm___6_time_c_OSTick__cpsie</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
</UL>

<P><STRONG><a name="[6d]"></a>__asm___6_time_c_OSTick__cpsid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>

<P><STRONG><a name="[78]"></a>__asm___12_wait_queue_c_ddacab25__cpsie</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wait_queue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
</UL>

<P><STRONG><a name="[77]"></a>__asm___12_wait_queue_c_ddacab25__cpsid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wait_queue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>

<P><STRONG><a name="[7e]"></a>__asm___15_message_queue_c_56390e30__cpsie</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_queue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
</UL>

<P><STRONG><a name="[7d]"></a>__asm___15_message_queue_c_56390e30__cpsid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message_queue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>

<P><STRONG><a name="[82]"></a>__asm___5_sem_c_sem_init__cpsie</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sem.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
</UL>

<P><STRONG><a name="[81]"></a>__asm___5_sem_c_sem_init__cpsid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sem.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>

<P><STRONG><a name="[29]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))

<P><STRONG><a name="[b4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetRegistersFromStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSVCHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;context_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; OSTick &rArr; interruptExit &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>AACI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CHLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CPU_CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLEXRAY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MCIA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MCIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USBDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USBHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mps_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42]"></a>Task6</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task6 &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>Task5</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task5 &rArr; sem_get &rArr; removeTaskFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>Task4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task4 &rArr; sem_get &rArr; removeTaskFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>Task3</STRONG> (Thumb, 110 bytes, Stack size 400 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Task3 &rArr; sem_release &rArr; removeHeadFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueSendToTail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>Task2</STRONG> (Thumb, 88 bytes, Stack size 400 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Task2 &rArr; timeDelay &rArr; schedule &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>Task1</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Task1 &rArr; timeDelay &rArr; schedule &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = main &rArr; uKern_Init &rArr; idleTaskInit &rArr; task_create &rArr; TCBAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uKern_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueCreate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[55]"></a>TCBInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[54]"></a>TCBAlloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TCBAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[50]"></a>task_create</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = task_create &rArr; TCBAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StkInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCBAlloc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCBInit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>tasksInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uKern_Init
</UL>

<P><STRONG><a name="[b5]"></a>getTCBbyPrio</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>FindHighestPriorityTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptExit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>

<P><STRONG><a name="[57]"></a>schedule</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = schedule &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindHighestPriorityTask
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskEnable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
</UL>

<P><STRONG><a name="[5b]"></a>yield</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = yield &rArr; schedule &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
</UL>

<P><STRONG><a name="[5c]"></a>TaskEnable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TaskEnable &rArr; schedule &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueSendToTail
</UL>

<P><STRONG><a name="[5d]"></a>TaskDisable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>

<P><STRONG><a name="[56]"></a>StkInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[b6]"></a>OSStartFirstTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>OSTickStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>

<P><STRONG><a name="[65]"></a>OSTickConfig</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTickConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uKern_Init
</UL>

<P><STRONG><a name="[3e]"></a>prvGetRegistersFromStack</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[60]"></a>IdleTask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IdleTask &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kernel.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>idleTaskInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = idleTaskInit &rArr; task_create &rArr; TCBAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uKern_Init
</UL>

<P><STRONG><a name="[4f]"></a>uKern_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uKern_Init &rArr; idleTaskInit &rArr; task_create &rArr; TCBAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idleTaskInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTickConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tasksInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>StartOS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartOS
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTickStart
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindHighestPriorityTask
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>interruptEnter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interruptEnter &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick
</UL>

<P><STRONG><a name="[68]"></a>interruptExit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interruptExit &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindHighestPriorityTask
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick
</UL>

<P><STRONG><a name="[41]"></a>OSTick</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSTick &rArr; interruptExit &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptExit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b7]"></a>TickTasks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, time.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>timeDelay</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timeDelay &rArr; schedule &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4
</UL>

<P><STRONG><a name="[b8]"></a>getTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>addTaskToWaitQueue</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wait_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = addTaskToWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
</UL>

<P><STRONG><a name="[74]"></a>removeTaskFromWaitQueue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wait_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = removeTaskFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
</UL>

<P><STRONG><a name="[76]"></a>removeHeadFromWaitQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wait_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = removeHeadFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueSendToTail
</UL>

<P><STRONG><a name="[51]"></a>queueCreate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = queueCreate &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>queueSendToTail</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queueSendToTail &rArr; removeHeadFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadFromWaitQueue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3
</UL>

<P><STRONG><a name="[45]"></a>queueReceive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = queueReceive &rArr; removeTaskFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueGetMessage
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTaskFromWaitQueue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTaskToWaitQueue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task6
</UL>

<P><STRONG><a name="[52]"></a>sem_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sem_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>sem_get</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sem_get &rArr; removeTaskFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTaskFromWaitQueue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTaskToWaitQueue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task5
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task6
</UL>

<P><STRONG><a name="[4b]"></a>sem_release</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sem_release &rArr; removeHeadFromWaitQueue &rArr; exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitCritical
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterCritical
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadFromWaitQueue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3
</UL>

<P><STRONG><a name="[b9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCBAlloc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueCreate
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task6
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueGetMessage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueSendToTail
</UL>

<P><STRONG><a name="[85]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ba]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[bc]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[88]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[33]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[8a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[89]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[c3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[39]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[90]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[91]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[93]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[40]"></a>context_switch</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, switch.o(SWITCH))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[92]"></a>start_first_task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, switch.o(SWITCH))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSVCHandler
</UL>

<P><STRONG><a name="[3f]"></a>MainSVCHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, switch.o(SWITCH))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_first_task
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[31]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[58]"></a>enterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_task_c_37835c6e__cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskEnable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[5a]"></a>exitCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_task_c_37835c6e__cpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskEnable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[61]"></a>enterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_kernel_c_85227911__cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptExit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptEnter
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
</UL>

<P><STRONG><a name="[62]"></a>exitCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_kernel_c_85227911__cpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptExit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptEnter
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
</UL>

<P><STRONG><a name="[6b]"></a>enterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_time_c_OSTick__cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick
</UL>

<P><STRONG><a name="[6c]"></a>exitCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_time_c_OSTick__cpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDelay
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick
</UL>

<P><STRONG><a name="[72]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wait_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTaskToWaitQueue
</UL>

<P><STRONG><a name="[75]"></a>list_del</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wait_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadFromWaitQueue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTaskFromWaitQueue
</UL>

<P><STRONG><a name="[71]"></a>list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wait_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadFromWaitQueue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTaskFromWaitQueue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTaskToWaitQueue
</UL>

<P><STRONG><a name="[70]"></a>enterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wait_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_wait_queue_c_ddacab25__cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadFromWaitQueue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTaskFromWaitQueue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTaskToWaitQueue
</UL>

<P><STRONG><a name="[73]"></a>exitCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wait_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_wait_queue_c_ddacab25__cpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadFromWaitQueue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTaskFromWaitQueue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTaskToWaitQueue
</UL>

<P><STRONG><a name="[7c]"></a>queueGetMessage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queueGetMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
</UL>

<P><STRONG><a name="[79]"></a>enterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_message_queue_c_56390e30__cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueSendToTail
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
</UL>

<P><STRONG><a name="[7a]"></a>exitCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, message_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_message_queue_c_56390e30__cpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueSendToTail
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queueReceive
</UL>

<P><STRONG><a name="[7f]"></a>enterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_sem_c_sem_init__cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
</UL>

<P><STRONG><a name="[80]"></a>exitCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_sem_c_sem_init__cpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_release
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_get
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
